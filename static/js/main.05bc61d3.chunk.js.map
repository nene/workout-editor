{"version":3,"sources":["components/Bar.tsx","components/WorkoutPlot.tsx","components/formatDuration.ts","components/WorkoutStats.tsx","components/ErrorMessage.tsx","components/CodeEditor.tsx","components/ZwoOutput.tsx","App.tsx","index.tsx"],"names":["zoneColorsMap","Bar","styled","div","props","durationPercentage","zone","intensityPercentage","Plot","WorkoutPlot","intervals","workoutDuration","totalDuration","maxIntensity","maximumIntensity","map","interval","intensity","duration","seconds","value","toBarProps","formatDuration","hours","Math","floor","minutes","splitDuration","formatIntensity","round","StatsLine","label","Container","Section","section","Header","h2","List","ul","ZoneList","WorkoutStats","workout","stats","averageIntensity","normalizedIntensity","tss","zones","name","ErrorMessage","p","CodeEditor","Editor","attrs","padding","highlight","code","replace","ZwoCode","pre","ZwoOutput","generateZwo","defaultWorkout","AppContainer","AppTitle","h1","chunkSize","Duration","App","useState","text","setText","parse","setWorkout","undefined","error","setError","onChange","useCallback","e","message","onValueChange","chunkRangeIntervals","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05bc61d3.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { ZoneType } from \"zwiftout\";\n\nexport type BarProps = {\n  // Percentage of total workout length\n  durationPercentage: number;\n  // Percentage of maximum intensity in workout\n  intensityPercentage: number;\n  zone: ZoneType;\n};\n\nconst zoneColorsMap: Record<ZoneType, string> = {\n  \"free\": \"linear-gradient(to top, rgba(204,204,204,1), rgba(255,255,255,0))\",\n  \"Z1\": \"#7f7f7f\",\n  \"Z2\": \"#338cff\",\n  \"Z3\": \"#59bf59\",\n  \"Z4\": \"#ffcc3f\",\n  \"Z5\": \"#ff6639\",\n  \"Z6\": \"#ff330c\",\n};\n\nexport const Bar = styled.div<BarProps>`\n  display: inline-block;\n  border-radius: 10px;\n  vertical-align: bottom;\n  margin-right: 0.1%;\n  /* exclude 0.1% margin from bar width */\n  width: ${(props) => props.durationPercentage - 0.1}%;\n  height: ${(props) => props.zone === \"free\" ? 100 : props.intensityPercentage}%;\n  background: ${(props) => zoneColorsMap[props.zone]};\n  transition: width 0.1s, height 0.1s, background-color 0.1s;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Interval, Intensity, Duration, totalDuration, maximumIntensity } from \"zwiftout\";\nimport { BarProps, Bar } from \"./Bar\";\n\nconst toBarProps = (interval: Interval, workoutDuration: Duration, maxIntensity: Intensity): BarProps => ({\n  zone: interval.intensity.zone,\n  durationPercentage: interval.duration.seconds / workoutDuration.seconds * 100,\n  intensityPercentage: interval.intensity.value / maxIntensity.value * 100,\n});\n\nconst Plot = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  height: 200px;\n  border-radius: 5px;\n  padding: 5px;\n  margin: 10px 0;\n`;\n\nexport const WorkoutPlot: React.FC<{ intervals: Interval[] }> = ({ intervals }) => {\n  const workoutDuration = totalDuration(intervals);\n  const maxIntensity = maximumIntensity(intervals);\n\n  return (\n    <Plot>\n      { intervals.map((interval) => toBarProps(interval, workoutDuration, maxIntensity)).map((props) => (<Bar {...props} />)) }\n    </Plot>\n  );\n}\n","import { Duration } from \"zwiftout\";\n\nconst splitDuration = (duration: Duration) => ({\n  hours: Math.floor(duration.seconds / 60 / 60),\n  minutes: Math.floor(duration.seconds / 60) % 60,\n  seconds: duration.seconds % 60,\n});\n\nexport const formatDuration = (duration: Duration): string => {\n  const {hours, minutes, seconds} = splitDuration(duration);\n  if (hours > 0) {\n    return `${hours}h ${minutes}min`;\n  }\n  else if (minutes > 0) {\n    return `${minutes}min`;\n  }\n  else if (seconds > 0) {\n    return `${seconds}sec`;\n  }\n  else {\n    return `-`;\n  }\n};\n","import React from 'react';\nimport { stats, Workout, Intensity } from 'zwiftout';\nimport { formatDuration } from './formatDuration';\nimport styled from 'styled-components';\n\nconst formatIntensity = (intensity: Intensity): string => `${Math.round(intensity.value * 100)}%`;\n\nconst StatsLine: React.FC<{ label: string, value: string | number }> = ({ label, value }) => (\n  <li><strong>{label}</strong> {value}</li>\n);\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  border: 1px solid #bbb;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 12px;\n  background: rgba(255, 255, 255, 0.6);\n`;\nconst Section = styled.section``;\n\nconst Header = styled.h2`\n  margin: 0;\n  font-size: 14px;\n  font-weight: normal;\n`;\nconst List = styled.ul`\n  margin: 1m 0;\n  padding: 0;\n  list-style: none;\n`;\nconst ZoneList = styled(List)`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\n\nexport const WorkoutStats: React.FC<{workout: Workout}> = ({ workout }) => {\n  const {totalDuration, averageIntensity, normalizedIntensity, tss, zones} = stats(workout);\n  \n  return (\n    <Container>\n      <Section>\n        <Header>Summary</Header>\n        <List>\n          <StatsLine label=\"Duration:\" value={formatDuration(totalDuration)} />\n          <StatsLine label=\"Average intensity:\" value={formatIntensity(averageIntensity)} />\n          <StatsLine label=\"Normalized intensity:\" value={formatIntensity(normalizedIntensity)} />\n          <StatsLine label=\"TSS:\" value={Math.round(tss)} />\n        </List>\n      </Section>\n      <Section>\n        <Header>Zone distribution</Header>\n        <ZoneList>\n          {zones.map(zone => (<StatsLine label={zone.name} value={formatDuration(zone.duration)} />)) }\n        </ZoneList>\n      </Section>\n    </Container>\n  )\n};\n","import styled from 'styled-components';\n\nexport const ErrorMessage = styled.p`\n  color: red;\n  background: #fee;\n  border-radius: 10px;\n  border: 2px solid red;\n  padding: 5px;\n  margin: 10px 0;\n`;","import Editor from 'react-simple-code-editor';\nimport styled from 'styled-components';\n\nconst highlight = (code: string): string => {\n  return code\n    .replace(/^(Name|Author|Description|Warmup|Rest|Interval|Cooldown|FreeRide):/gm, \"<code class='keyword'>$&</code>\")\n    .replace(/(\\d{1,2}:)?\\d{1,2}:\\d{1,2}/g, \"<code class='duration'>$&</code>\")\n    .replace(/\\d+%/g, \"<code class='intensity'>$&</code>\")\n    .replace(/\\d+rpm/g, \"<code class='cadence'>$&</code>\")\n    .replace(/\\.\\./g, \"<code class='range'>$&</code>\")\n    .replace(/@(.*?)$/gm, \"<code class='comment-start'>@</code><code class='comment'>$1</code>\");\n};\n\nexport const CodeEditor = styled(Editor).attrs({ padding: 10, highlight })`\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  font-size: 14px;\n  line-height: 1.3;\n  border: 1px inset #bbb;\n  border-radius: 3px;\n  background: #fff;\n  \n  code.keyword {\n    font-weight: bold;\n  }\n  code.duration {\n    color: #681caf;\n  }\n  code.intensity {\n    color: #af391c;\n  }\n  code.cadence {\n    color: #86af1c;\n  }\n  code.range {\n    color: #888;\n  }\n  code.comment {\n    font-style: italic;\n    color: #888;\n    .duration {\n      color: #8d67af;\n    }\n  }\n  code.comment-start {\n    font-weight: bold;\n    font-style: italic;\n    color: #888;\n  }\n`;\n","import React from 'react';\nimport { Workout, generateZwo } from 'zwiftout';\nimport styled from 'styled-components';\n\nconst Header = styled.h2`\n  font-weight: normal;\n  font-size: 16px;\n`;\n\nconst ZwoCode = styled.pre`\n  border: 1px solid #bbb;\n  border-radius: 3px;\n  padding: 10px;\n`;\n\nexport const ZwoOutput: React.FC<{ workout: Workout }> = ({ workout }) => {\n  return (\n    <div>\n      <Header>Generated Zwift workout file (.zwo):</Header>\n      <ZwoCode>{generateZwo(workout)}</ZwoCode>\n    </div>\n  )\n};\n","import React, { useState, useCallback } from 'react';\nimport { WorkoutPlot } from './components/WorkoutPlot';\nimport { WorkoutStats } from './components/WorkoutStats';\nimport { parse, chunkRangeIntervals, Duration } from 'zwiftout';\nimport { ErrorMessage } from './components/ErrorMessage';\nimport styled from 'styled-components';\nimport { CodeEditor } from './components/CodeEditor';\nimport { ZwoOutput } from './components/ZwoOutput';\n\nconst defaultWorkout = `Name: Sample workout\nDescription: Try changing it, and see what happens below.\n\nWarmup: 10:00 30%..75%\nInterval: 15:00 100% 90rpm\n  @ 00:00 Start off easy\n  @ 01:00 Settle into rhythm\n  @ 07:30 Half way through\n  @ 14:00 Final minute, stay strong!\nRest: 10:00 75%\nFreeRide: 20:00\n  @ 00:10 Just have some fun, riding as you wish\nCooldown: 10:00 70%..30%\n`;\n\nconst AppContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst AppTitle = styled.h1`\n  font-weight: normal;\n`;\n\n// Split range-intervals into 1 minute chunks\nconst chunkSize = new Duration(60);\n\nexport function App() {\n  const [text, setText] = useState(defaultWorkout);\n  const [workout, setWorkout] = useState(parse(defaultWorkout));\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  const onChange = useCallback((value: string) => {\n    setText(value);\n    try {\n      setWorkout(parse(value));\n      setError(undefined);\n    } catch (e) {\n      setError(e.message);\n    }\n  }, [setText, setWorkout, setError]);\n  \n  return (\n    <AppContainer>\n      <AppTitle>Workout editor</AppTitle>\n      <CodeEditor onValueChange={onChange} value={text} />\n      <WorkoutPlot intervals={chunkRangeIntervals(workout.intervals, chunkSize)} />\n      {error && <ErrorMessage>{error}</ErrorMessage>}\n      <WorkoutStats workout={workout} />\n      <ZwoOutput workout={workout} />\n    </AppContainer>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}